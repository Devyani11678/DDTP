{
	"info": {
		"_postman_id": "f4868653-bd4a-4c50-83d4-5b825d34ace6",
		"name": "PetstoreDT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25633520"
	},
	"item": [
		{
			"name": "Place an order for a pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body\r",
							"//const response = pm.response.json();\r",
							"// Validate that the \"status\" field is one of the expected values\r",
							"//pm.test(\"Status is one of the expected values\", () => {\r",
							"//    pm.expect(response.status).to.be.oneOf([\"delivered\", \"Not delivered\", \"In-Progress\", \"placed\", \"pending\"]);\r",
							"//});\r",
							"//console.log(response)\r",
							"// Add delay of 3 seconds (3000 milliseconds)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response=pm.response.json();\r",
							"//This part gets the id from the actual API response\r",
							"pm.environment.unset(\"Id\");\r",
							"pm.environment.set(\"Id\", Number(response.id)); \r",
							"console.log(response.id)\r",
							"\r",
							"pm.environment.unset(\"PetId\");\r",
							"pm.environment.set(\"PetId\", Number(response.petId)); \r",
							"console.log(response.petId)\r",
							"\r",
							"pm.environment.unset(\"Quantity\");\r",
							"pm.environment.set(\"Quantity\", response.quantity); \r",
							"console.log(response.quantity)\r",
							"\r",
							"pm.environment.unset(\"Status\");\r",
							"pm.environment.set(\"Status\", response.status); \r",
							"console.log(response.status)\r",
							"\r",
							"//This part pulls id from the CSV file:\r",
							"const idc = pm.iterationData.get(\"id\");\r",
							"const petid = pm.iterationData.get(\"petId\");\r",
							"const q = pm.iterationData.get(\"quantity\");\r",
							"const s = pm.iterationData.get(\"status\");\r",
							"\r",
							"//This test checks if response.id matches CSV's id:\r",
							"pm.test(\"Id matches\", function () {\r",
							"    pm.expect(response.id).to.eql(idc);\r",
							"});\r",
							"\r",
							"pm.test(\"PetId matches\", function () {\r",
							"    pm.expect(response.petId).to.eql(petid);\r",
							"});\r",
							"\r",
							"pm.test(\"Quantity matches\", function () {\r",
							"    pm.expect(response.quantity).to.eql(q);\r",
							"});\r",
							"\r",
							"pm.test(\"PetId matches\", function () {\r",
							"    pm.expect(response.petId).to.eql(petid);\r",
							"});\r",
							"\r",
							"pm.test(\"Status matches\", function () {\r",
							"    pm.expect(response.status).to.eql(s);\r",
							"});\r",
							"\r",
							"console.log(\"completed\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{id}}\",\n  \"petId\": \"{{petId}}\",\n  \"quantity\": \"{{quantity}}\",\n  \"shipDate\": \"2025-04-04\",\n  \"status\": \"{{status}}\",\n  \"complete\": true\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/store/order",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"store",
						"order"
					]
				}
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
				},
				{
					"name": "Invalid Order",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "https://postman-echo.com/delay/5 Copy",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/5",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Add delay of 3 seconds (3000 milliseconds)\r",
							"\r",
							"\r",
							"console.log(\"Fetching with ID:\", Number(pm.environment.get(\"Id\")));\r",
							"console.log(\"Fetching petid : \", Number(pm.environment.get(\"PetId\")));\r",
							"console.log(\"Fetching quantity : \",pm.environment.get(\"Quantity\"));\r",
							"console.log(\"Fetching status : \",pm.environment.get(\"Status\"));\r",
							"console.log(\"completed\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/store/order/{{Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"store",
						"order",
						"{{Id}}"
					]
				},
				"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
				},
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Order not found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "https://postman-echo.com/delay/5 Copy 2",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/5",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete purchase order by ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Add delay of 3 seconds (3000 milliseconds)\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Fetching with ID:\", pm.environment.get(\"Id\"));\r",
							"\r",
							"console.log(\"completed\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/store/order/{{Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"store",
						"order",
						"{{Id}}"
					]
				},
				"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
			},
			"response": [
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Order not found",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "https://postman-echo.com/delay/5",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/5",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"5"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}